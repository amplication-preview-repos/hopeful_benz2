/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DownloadHistory as PrismaDownloadHistory,
  User as PrismaUser,
} from "@prisma/client";

export class DownloadHistoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DownloadHistoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.downloadHistory.count(args);
  }

  async downloadHistories(
    args: Prisma.DownloadHistoryFindManyArgs
  ): Promise<PrismaDownloadHistory[]> {
    return this.prisma.downloadHistory.findMany(args);
  }
  async downloadHistory(
    args: Prisma.DownloadHistoryFindUniqueArgs
  ): Promise<PrismaDownloadHistory | null> {
    return this.prisma.downloadHistory.findUnique(args);
  }
  async createDownloadHistory(
    args: Prisma.DownloadHistoryCreateArgs
  ): Promise<PrismaDownloadHistory> {
    return this.prisma.downloadHistory.create(args);
  }
  async updateDownloadHistory(
    args: Prisma.DownloadHistoryUpdateArgs
  ): Promise<PrismaDownloadHistory> {
    return this.prisma.downloadHistory.update(args);
  }
  async deleteDownloadHistory(
    args: Prisma.DownloadHistoryDeleteArgs
  ): Promise<PrismaDownloadHistory> {
    return this.prisma.downloadHistory.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.downloadHistory
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
